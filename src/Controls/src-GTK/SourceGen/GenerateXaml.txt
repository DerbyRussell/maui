using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Text;

using Microsoft.Maui.Controls.Xaml;

namespace Microsoft.Maui.Controls.SourceGen
{
	[Generator(LanguageNames.CSharp)]
	public class GenerateXaml
	{
		public static void GenerateXamlCodeBehind(string fileSource)
		{
			if (fileSource == null)
				return;

			// Get a unique string for this xaml project item
			var itemName = projItem.ManifestResourceName ?? projItem.RelativePath;
			if (itemName == null)
				return;
			var uid = Crc64.ComputeHashString($"{compilation.AssemblyName}.{itemName}");

			if (!TryParseXaml(text, uid, compilation, xmlnsDefinitionCache, out var rootType, out var rootClrNamespace, out var generateDefaultCtor, out var addXamlCompilationAttribute, out var hideFromIntellisense, out var XamlResourceIdOnly, out var baseType, out var namedFields, out var parseException))
			{
				if (parseException != null)
					context.ReportDiagnostic(Diagnostic.Create(Descriptors.XamlParserError, null, parseException.Message));
				return;
			}
			var sb = new StringBuilder();
			sb.AppendLine(AutoGeneratedHeaderText);

			var hintName = $"{(string.IsNullOrEmpty(Path.GetDirectoryName(projItem.TargetPath)) ? "" : Path.GetDirectoryName(projItem.TargetPath) + Path.DirectorySeparatorChar)}{Path.GetFileNameWithoutExtension(projItem.TargetPath)}.{projItem.Kind.ToLowerInvariant()}.sg.cs".Replace(Path.DirectorySeparatorChar, '_');

			if (projItem.ManifestResourceName != null && projItem.TargetPath != null)
				sb.AppendLine($"[assembly: global::Microsoft.Maui.Controls.Xaml.XamlResourceId(\"{projItem.ManifestResourceName}\", \"{projItem.TargetPath.Replace('\\', '/')}\", {(rootType == null ? "null" : "typeof(global::" + rootClrNamespace + "." + rootType + ")")})]");

			if (XamlResourceIdOnly)
			{
				context.AddSource(hintName, SourceText.From(sb.ToString(), Encoding.UTF8));
				return;
			}

			if (rootType == null)
				throw new Exception("Something went wrong");

			sb.AppendLine($"namespace {rootClrNamespace}");
			sb.AppendLine("{");
			sb.AppendLine($"\t[global::Microsoft.Maui.Controls.Xaml.XamlFilePath(\"{projItem.RelativePath?.Replace("\\", "\\\\")}\")]");
			if (addXamlCompilationAttribute)
				sb.AppendLine($"\t[global::Microsoft.Maui.Controls.Xaml.XamlCompilation(global::Microsoft.Maui.Controls.Xaml.XamlCompilationOptions.Compile)]");
			if (hideFromIntellisense)
				sb.AppendLine($"\t[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]");

			sb.AppendLine($"\tpublic partial class {rootType} : {baseType}");
			sb.AppendLine("\t{");

			//optional default ctor
			if (generateDefaultCtor)
			{
				sb.AppendLine($"\t\t[global::System.CodeDom.Compiler.GeneratedCode(\"Microsoft.Maui.Controls.SourceGen\", \"1.0.0.0\")]");
				sb.AppendLine($"\t\tpublic {rootType}()");
				sb.AppendLine("\t\t{");
				sb.AppendLine("\t\t\tInitializeComponent();");
				sb.AppendLine("\t\t}");
				sb.AppendLine();
			}

			//create fields
			if (namedFields != null)
				foreach ((var fname, var ftype, var faccess) in namedFields)
				{
					sb.AppendLine($"\t\t[global::System.CodeDom.Compiler.GeneratedCode(\"Microsoft.Maui.Controls.SourceGen\", \"1.0.0.0\")]");

					sb.AppendLine($"\t\t{faccess} {ftype} {(CSharpKeywords.Contains(fname) ? "@" + fname : fname)};");
					sb.AppendLine();
				}

			//initializeComponent
			sb.AppendLine($"\t\t[global::System.CodeDom.Compiler.GeneratedCode(\"Microsoft.Maui.Controls.SourceGen\", \"1.0.0.0\")]");

			// add MemberNotNull attributes
			if (namedFields != null)
			{
				sb.AppendLine($"#if NET5_0_OR_GREATER");
				foreach ((var fname, _, _) in namedFields)
				{

					sb.AppendLine($"\t\t[global::System.Diagnostics.CodeAnalysis.MemberNotNullAttribute(nameof({(CSharpKeywords.Contains(fname) ? "@" + fname : fname)}))]");
				}

				sb.AppendLine($"#endif");
			}

			sb.AppendLine("\t\tprivate void InitializeComponent()");
			sb.AppendLine("\t\t{");
			sb.AppendLine($"\t\t\tglobal::Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml(this, typeof({rootType}));");
			if (namedFields != null)
				foreach ((var fname, var ftype, var faccess) in namedFields)
					sb.AppendLine($"\t\t\t{(CSharpKeywords.Contains(fname) ? "@" + fname : fname)} = global::Microsoft.Maui.Controls.NameScopeExtensions.FindByName<{ftype}>(this, \"{fname}\");");

			sb.AppendLine("\t\t}");
			sb.AppendLine("\t}");
			sb.AppendLine("}");

			context.AddSource(hintName, SourceText.From(sb.ToString(), Encoding.UTF8));
		}
	}
}
